{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/App.svelte",
    "../src/Components/Filter.svelte",
    "../src/Components/Item.svelte"
  ],
  "sourcesContent": [
    "<script>\n\timport { onMount } from 'svelte';\n\timport { beforeUpdate, afterUpdate } from 'svelte';\n\timport data from './data.js';\n\n\n\timport ItemList from './Components/ItemList.svelte';\n\timport Filter from  './Components/Filter.svelte';\n\n\tlet title = 'Guild Bank Prototype (EARLY WIP)';\n\n\tlet { bank, gold, updated } = data;\n\tupdated = updated * 1000;\n\n\tlet itemKeys = {};\n\tlet bags = {bank: [], inventory: []};\n\tfor (let bag of bank) {\n\t\tlet contents = bag.contents;\n\t\t// skip if it is an object ( e.g. {} ) because it has nothing in it.\n\t\tif (contents.constructor !== Array){\n\t\t\tcontinue;\n\t\t}\n\n\t\tfor (let item of contents) {\n\t\t\tif (!itemKeys[item.id]) {\n\t\t\t\titemKeys[item.id] = {\n\t\t\t\t\tequipLoc:item.equipLoc,\n\t\t\t\t\ttype:item.type,\n\t\t\t\t\trarity:item.rarity,\n\t\t\t\t\tslot:item.slot,\n\t\t\t\t\tid:item.id,\n\t\t\t\t\tsubType:item.subType,\n\t\t\t\t\tminLevel:item.minLevel,\n\t\t\t\t\tcount:0,\n\t\t\t\t\tname:item.name,\n\t\t\t\t\ticon:item.icon\n\t\t\t\t};\n\t\t\t}\n\t\t\titemKeys[item.id].count += item.count;\n\t\t}\n\t}\n\n\tlet axios = window.axios;\n\tlet tempItems = [];\n\tlet items = [];\n\tObject.keys(itemKeys).sort().forEach((itemID) => {\n\t\taxios.get('https://classic.wowhead.com/tooltip/item/'+itemID)\n\t\t\t.then(resp => {\n\t\t\t\tlet item = itemKeys[itemID];\n\t\t\t\titem.icon = resp.data.icon;\n\t\t\t\ttempItems.push(item);\n\t\t\t\tif (tempItems.length == Object.keys(itemKeys).length) {\n\t\t\t\t\titems = tempItems.slice().sort((aIn,bIn) => {\n\t\t\t\t\t\tlet a = aIn.name;\n\t\t\t\t\t\tlet b = bIn.name;\n\t\t\t\t\t\tif (a < b) return -1;\n\t\t\t\t\t\tif (a > b) return 1;\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t});\n\n\tlet itemsShown = items;\n\n\tfunction onFiltered(e) {\n\t\titemsShown = e.detail;\n\t}\n\n\tfunction reloadLinks(){\n\t\tlet $WowheadPower = window.$WowheadPower;\n\t\t$WowheadPower.refreshLinks();\n\t}\n\n\tlet moment = window.moment;\n\n\tonMount(reloadLinks);\n\t// afterUpdate(reloadLinks);\n</script>\n\n<style>\n\t.container {\n\t\tpadding: 50px;\n\t}\n\n\t.gold {\n\t\tcolor: goldenrod;\n\t}\n\n\t.silver {\n\t\tcolor: silver;\n\t}\n\n\t.copper {\n\t\tcolor:  chocolate;\n\t}\n</style>\n\n<div class=\"container\">\n\t<h1>\n\t\t{title}\n\t</h1>\n\t<h5>Last Updated: { moment(updated).fromNow() }</h5>\n\t<h3>\n\t\tCoffers:\n\t\t{gold.gold}<span class=\"gold\">g</span>\n\t\t{gold.silver}<span class=\"silver\">s</span>\n\t\t{gold.copper}<span class=\"copper\">c</span>\n\t</h3>\n\t{#if items && items.length}\n\t\t<Filter data={items} on:filtered={onFiltered}></Filter>\n\t\t<ItemList items={itemsShown}></ItemList>\n\t{:else}\n\t\t<p class=\"loading\">Loading...</p>\n\t{/if}\n</div>\n",
    "<script>\nimport { createEventDispatcher, afterUpdate } from 'svelte';\n\nimport { FilterList } from '../Models/Filter.model.js';\nimport Logger from '../Services/Logger.service';\nimport {LogLevels} from '../Services/Logger.service';\n\nconst log = new Logger('Filter Component');\n// log.setLogLevel(LogLevels.debug);\n\nconst dispatch = createEventDispatcher();\n\nexport let data = [];\n\nlet selectedFilters = [];\nlet textFilter = '';\nlet isTextFilterStrict = false;\n\nconst weaponTypes = new FilterList('Weapon', [\n  ['One-Handed Axes','One-Handed Axes'],\n  ['Two-Handed Axes', 'Two-Handed Axes'],\n  ['Bows', 'Bows'],\n  ['Guns', 'Guns'],\n  ['One-Handed Maces', 'One-Handed Maces'],\n  ['Two-Handed Maces', 'Two-Handed Maces'],\n  ['Polearms', 'Polearms'],\n  ['One-Handed Swords', 'One-Handed Swords'],\n  ['Two-Handed Swords', 'Two-Handed Swords'],\n  ['Warglaives', 'Warglaives'],\n  ['Staves', 'Staves'],\n  ['Fist Weapons', 'Fist Weapons'],\n  ['Miscellaneous', 'Miscellaneous'],\n  ['Daggers', 'Daggers'],\n  ['Thrown', 'Thrown'],\n  ['Spears', 'Spears'],\n  ['Crossbows', 'Crossbows'],\n  ['Wands', 'Wands'],\n  ['Fishing Poles', 'Fishing Poles']\n], 'subType');\n\n\nlet armorSlots = new FilterList('Slot', [\n  [\"Head\", \"INVTYPE_HEAD\"],\n  [\"Neck\", \"INVTYPE_NECK\"],\n  [\"Shoulder\", \"INVTYPE_SHOULDER\"],\n  [\"Shirt\", \"INVTYPE_BODY\"],\n  [\"Chest\", \"INVTYPE_CHEST\"],\n  [\"Chest\", \"INVTYPE_ROBE\"],\n  [\"Waist\", \"INVTYPE_WAIST\"],\n  [\"Legs\", \"INVTYPE_LEGS\"],\n  [\"Feet\", \"INVTYPE_FEET\"],\n  [\"Wrist\", \"INVTYPE_WRIST\"],\n  [\"Hands\", \"INVTYPE_HAND\"],\n  [\"Fingers\", \"INVTYPE_FINGER\"],\n  [\"Trinkets\", \"INVTYPE_TRINKET\"],\n  [\"Cloaks\", \"INVTYPE_CLOAK\"],\n  [\"Shield\", \"INVTYPE_SHIELD\"],\n  [\"Held\", \"INVTYPE_HOLDABLE\"],\n  [\"Relics\", \"INVTYPE_RELIC\"],\n  [\"Tabard\", \"INVTYPE_TABARD\"]\n], 'equipLoc');\n\nlet armorSubs = new FilterList('ArmorSubType',[\n  [\"Miscellaneous\", \"Miscellaneous\", armorSlots],\n  [\"Cloth\",\"Cloth\", armorSlots],\n  [\"Leather\",\"Leather\", armorSlots],\n  [\"Mail\",\"Mail\", armorSlots],\n  [\"Plate\",\"Plate\", armorSlots],\n  [\"Cosmetic\",\"Cosmetic\", armorSlots],\n  [\"Shields\",\"Shields\"],\n  [\"Librams\",\"Librams\"],\n  [\"Idols\",\"Idols\"],\n  [\"Totems\",\"Totems\"],\n  [\"Sigils\",\"Sigils\"],\n  [\"Relic\",\"Relic\"]\n], 'subType');\n\nlet recipeSubtypes = new FilterList('RecipeSubType',[\n  ['Cooking'],\n  ['First Aid'],\n  ['Alchemy'],\n  ['Blacksmithing'],\n  ['Enchanting'],\n  ['Engineering'],\n  ['Leatherworking'],\n  ['Tailoring'],\n  ['Book']\n\n], 'subType');\n\nconst mainCategories = new FilterList('Type', [\n  ['Armor', 'Armor', armorSubs],\n  ['Container', 'Container'],\n  ['Recipe', 'Recipe', recipeSubtypes],\n  ['Trade Goods', ['Trade Goods','Reagent']],\n  ['Weapon', 'Weapon', weaponTypes],\n], 'type');\n\nlog.debug(mainCategories);\n\nfunction testIt(item, path){\n  log.debug('testing',item.name, JSON.stringify(path));\n  log.debug(mainCategories.filter(item, path));\n}\n\nfunction testItemFiltering(){\n  let testItem1 = {name: 'testWand', type: 'Weapon', subType: 'Wands'};\n  testIt(testItem1, ['Armor','Wands']);\n  testIt(testItem1, ['Weapon','Wands']);\n  testIt(testItem1, ['Weapon','Daggers']);\n\n  let testItem2 = {\"equipLoc\":\"INVTYPE_BODY\", \"type\":\"Armor\", \"rarity\":1, \"slot\":11, \"subType\":\"Miscellaneous\", \"name\":\"Stylish Black Shirt\"}\n  // testIt(testItem2, ['Weapon']);\n  // testIt(testItem2, ['Armor']);\n  testIt(testItem2, ['Armor', 'Miscellaneous']);\n  testIt(testItem2, ['Armor', 'Miscellaneous','']);\n  // testIt(testItem2, ['Armor', 'Miscellaneous', 'Shirt']);\n  // testIt(testItem2, ['Armor', 'Miscellaneous', 'Tabard']);\n\n  // let testItem3 = {\"type\":\"Recipe\",\"rarity\":2,\"slot\":11,\"id\":4408,\"subType\":\"Engineering\",\"count\":1,\"name\":\"Schematic: Mechanical Squirrel\",\"icon\":134942};\n  // testIt(testItem3, ['Weapon']);\n  // testIt(testItem3, ['Recipe']);\n  // testIt(testItem3, ['Recipe','Tailoring']);\n  // testIt(testItem3, ['Recipe','Engineering']);\n}\n\nfunction testGetFilterItems() {\n  log.debug(mainCategories.getFilterEntries());\n  log.debug(mainCategories.getFilterEntries(['Armor']));\n}\n\n// testItemFiltering();\n// testGetFilterItems();\n\nlet currentSelectedItem;\n\nlet activeFilterOptions = mainCategories.getFilterEntries(selectedFilters);\n\nfunction changeFilterOption() {\n  selectedFilters = selectedFilters.concat([currentSelectedItem]);\n  currentSelectedItem = \"\";\n  activeFilterOptions = mainCategories.getFilterEntries(selectedFilters);\n  filterData();\n  log.debug('selectedFilters',selectedFilters);\n}\n\nfunction stepBack() {\n  selectedFilters = selectedFilters.slice(0,selectedFilters.length - 1);\n  activeFilterOptions = mainCategories.getFilterEntries(selectedFilters);\n  filterData();\n}\n\nfunction buildTextFilterPattern(userInput, isStrictOnly){\n  let textPattern = '';\n  if(isStrictOnly){\n    textPattern  = userInput;\n  } else {\n    textPattern = userInput.split(\"\").reduce((a,b) => { return a+'[^'+b+']*'+b });\n  }\n  let regPattern = textPattern ? textPattern : '.*';\n  log.debug('Filter text pattern:',regPattern);\n  return new RegExp(regPattern,'i');\n}\n\nfunction testRegExBuilder(){\n  function runTest(item, testStr){\n    log.debug(item,'->','\"'+testStr+'\"','?',item.test(testStr));\n  }\n  let a1 = buildTextFilterPattern('abcd');\n  let a2 = buildTextFilterPattern('abcd',true);\n  let b1 = buildTextFilterPattern('bananas');\n  let b2 = buildTextFilterPattern('bananas',true);\n  runTest(a1,'alabama clydesdale');\n  runTest(a2,'alabama clydesdale');\n  runTest(a2,'gogo fabcde fgsfds');\n  runTest(b1,'bo ar no ae ne far times');\n  runTest(b1,'bo ar aaaaaaano ae ne far times');\n  runTest(b2,'bo ar no ae ne far times');\n  runTest(b2,'everyone loves bananas!!');\n}\n// testRegExBuilder();\n\nfunction runTextFilter(dataIn) {\n  if (!textFilter) { //if it's empty we don't need to do anything\n    return dataIn;\n  }\n  let pattern = buildTextFilterPattern(textFilter, isTextFilterStrict);\n  return dataIn.filter(item => {\n    return pattern.test(item.name)\n  });\n}\n\nfunction filterData() {\n  let filtered = data.filter(item => {\n    return mainCategories.filter(item, selectedFilters);\n  });\n  log.debug('filtered!',filtered);\n\n  let fullyFiltered = runTextFilter(filtered);\n\n  dispatch('filtered',fullyFiltered);\n}\n\nafterUpdate( function(){\n  filterData();\n});\n\nfunction onKeyUp(e) {\n  if (e.key === 'Escape') {\n    textFilter = '';\n  }\n}\n\n</script>\n\n<style>\n  ul.filter-tags {\n    list-style: none;\n    margin-left: 0;\n    padding-left: 0;\n  }\n\n  ul.filter-tags li {\n    padding: 1em;\n    display: inline-block;\n  }\n\n  ul.filter-tags li:first-child {\n    padding-left:0;\n  }\n\n  ul.filter-tags select {\n    padding: 0.1em;\n  }\n\n  .delete {\n    display:inline-block;\n    padding: 0.2em;\n    color: #b00;\n    cursor: pointer;\n  }\n\n  .search-container {\n    display:inline-block;\n    margin: 0;\n    padding: 0;\n    width: 80%;\n    position: relative;\n  }\n\n  .search-container .search-icon {\n    height: 1.25em;\n    width: 1.25em;\n    position: absolute;\n    left: 0.45em;\n    top: 0.45em;\n  }\n\n  .search-input {\n    width: 100%;\n    padding-left:2em;\n  }\n</style>\n\n<div class=\"filters\">\n  <!-- <pre>{JSON.stringify(selectedFilters)}</pre> -->\n  <ul class=\"filter-tags\">\n  {#each selectedFilters as selectedFilter, index}\n    <li>\n      {selectedFilter}\n      {#if index === selectedFilters.length - 1}\n        <span class=\"delete\" on:click={stepBack}>X</span>\n      {/if}\n    </li>\n  {/each}\n  {#if activeFilterOptions && activeFilterOptions.length}\n    <li>\n      <select id=\"categorySelector\" on:change={changeFilterOption} bind:value={currentSelectedItem}>\n        <option value=\"\">-All-</option>\n        {#each activeFilterOptions as filterEntry}\n          <option value={filterEntry.displayName}>{filterEntry.displayName}</option>\n          <!-- <pre>{JSON.stringify(filterEntry)}</pre> -->\n        {/each}\n      </select>\n    </li>\n  {/if}\n  </ul>\n  <p class=\"search-box\">\n    <span class=\"search-container\">\n      <input class=\"search-input\" bind:value={textFilter} on:keyup={onKeyUp} on:change={filterData} type=\"text\" placeholder=\"Thunderfury\"/>\n      <img src=\"https://upload.wikimedia.org/wikipedia/commons/7/7e/Vector_search_icon.svg\" alt=\"search icon\" class=\"search-icon\"/>\n    </span>\n    <span class=\"chiggity-check\"><label><input type=\"checkbox\" bind:checked={isTextFilterStrict}/> Strict match only</label></span>\n  </p>\n</div>",
    "<script>\n  export let item;\n\n</script>\n\n<style>\n  .icon {\n    text-align: right;\n    width: 1.6em;\n  }\n  img {\n    height: 1.25em;\n  }\n</style>\n\n<tr class=\"item\" id=\"item-{item.id}\">\n  <td class=\"qty\"> {item.count}</td>\n  <td class=\"icon\">\n    <img src=\"//wow.zamimg.com/images/wow/icons/medium/{item.icon}.jpg\" alt=\"icon\"/>\n  </td>\n  <td>\n    <a href=\"https://classic.wowhead.com/item={item.id}\" target=\"_blank\" class=\"q{item.rarity}\" domain=\"classic\" data-wowhead=\"item={item.id}\">[{item.name}]</a>\n  </td>\n  <td>{item.type}</td>\n  <td>{item.subType}</td>\n  <td>{item.minLevel ? item.minLevel : '-'}</td>\n  {#if window.testing}\n    <td><pre>{JSON.stringify(item)}</pre></td>\n  {/if}\n</tr>"
  ],
  "names": [],
  "mappings": "AAiFC,UAAU,cAAC,CAAC,AACX,OAAO,CAAE,IAAI,AACd,CAAC,AAED,KAAK,cAAC,CAAC,AACN,KAAK,CAAE,SAAS,AACjB,CAAC,AAED,OAAO,cAAC,CAAC,AACR,KAAK,CAAE,MAAM,AACd,CAAC,AAED,OAAO,cAAC,CAAC,AACR,KAAK,CAAG,SAAS,AAClB,CAAC;ACyHA,EAAE,YAAY,eAAC,CAAC,AACd,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,CAAC,CACd,YAAY,CAAE,CAAC,AACjB,CAAC,AAED,EAAE,2BAAY,CAAC,EAAE,eAAC,CAAC,AACjB,OAAO,CAAE,GAAG,CACZ,OAAO,CAAE,YAAY,AACvB,CAAC,AAED,EAAE,2BAAY,CAAC,iBAAE,YAAY,AAAC,CAAC,AAC7B,aAAa,CAAC,AAChB,CAAC,AAED,EAAE,2BAAY,CAAC,MAAM,eAAC,CAAC,AACrB,OAAO,CAAE,KAAK,AAChB,CAAC,AAED,OAAO,eAAC,CAAC,AACP,QAAQ,YAAY,CACpB,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,iBAAiB,eAAC,CAAC,AACjB,QAAQ,YAAY,CACpB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,KAAK,CAAE,GAAG,CACV,QAAQ,CAAE,QAAQ,AACpB,CAAC,AAED,gCAAiB,CAAC,YAAY,eAAC,CAAC,AAC9B,MAAM,CAAE,MAAM,CACd,KAAK,CAAE,MAAM,CACb,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,MAAM,CACZ,GAAG,CAAE,MAAM,AACb,CAAC,AAED,aAAa,eAAC,CAAC,AACb,KAAK,CAAE,IAAI,CACX,aAAa,GAAG,AAClB,CAAC;AC/PD,KAAK,eAAC,CAAC,AACL,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,KAAK,AACd,CAAC,AACD,GAAG,eAAC,CAAC,AACH,MAAM,CAAE,MAAM,AAChB,CAAC"
}